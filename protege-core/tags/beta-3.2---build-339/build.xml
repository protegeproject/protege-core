<?xml version = "1.0" encoding = "utf-8"?>
<project name = "Protege" default = "usage" basedir = ".">    
	<description>Autonomous Ant file for building Protege</description>  
	<!-- Load necessary property files. -->
	<property file = "./src/edu/stanford/smi/protege/resource/files/build.properties"/>  
	<property file = "local.properties"/>  
	<!-- Set global properties for this build. -->
	<property name = "extended.name" value = "${name} ${build.version} ${build.status}"/>
	<property name = "src" value = "./src"/>  
        <property name = "junit" value = "./junit"/>
	<property name = "classes" value = "./classes"/>  
	<property name = "docs" value = "./docs"/> 
	<property name = "javadocs" value = "${docs}/apidocs"/>
	<property name = "dist" value = "./dist"/>
	<property name = "lib" value = "./lib"/>
	<property name = "scripts" value = "./bin"/>
        <property name = "logs" value = "./logs"/>
        <property name = "plugins" value = "./plugins"/>
	<!-- Compiler options. -->
	<property name = "deprecation" value = "on"/>    
	<property name = "debug" value = "on"/>  
	<property name = "optimize" value = "on"/>  
	<property name = "packages" value = "edu.*"/>  
	<property name = "includeAntRuntime" value = "no"/>
	<property name = "source" value = "1.5"/>
	<path id = "project.classpath">    
		<pathelement location = "${lib}/junit.jar"/>
		<pathelement location = "${lib}/looks.jar"/>
		<pathelement location = "${lib}/unicode_panel.jar"/>
	</path>  
        <path id = "database.drivers">
          <fileset dir="dbdrivers">
            <include name="*.jar"/>
          </fileset>
        </path>
	<!-- =================================================================== -->
	
	<!-- USAGE -->
	
	<!-- Instructions for using the build file -->
	
	<!-- =================================================================== -->
	<target name = "usage" depends = "init">    
		<echo message = ""/>
		<echo message = "protege build instructions"/>
		<echo message = "-------------------------------------------------------------"/>
		<echo message = ""/>
		<echo message = " available targets are:"/>
		<echo message = ""/>
		<echo message = "   all      --> runs compile, documentation, jar, dist tasks"/>
		<echo message = "   clean    --> cleans up generated files and directories"/>
		<echo message = "   compile  --> compiles the source code"/>
		<echo message = "   dist     --> generates source and binary distributions"/>
		<echo message = "   jar      --> generates the protege JAR file"/>
		<echo message = "   javadocs --> generates the API docs"/>
                <echo message = "   junit    --> runs the junit tests (needs a little work...)"/>
		<echo message = "   usage    --> provides help on using the build tool (default)"/>
		<echo message = ""/>
		<echo message = "-------------------------------------------------------------"/>
		<echo message = ""/>  
	</target>
	<!-- =================================================================== -->
	
	<!-- INIT -->
	
	<!-- Creates the timestamp -->
	
	<!-- =================================================================== -->
	<target name = "init">    
		<tstamp/>  
	</target>  
	<!-- =================================================================== -->
	
	<!-- PREPARE -->
	
	<!-- Create the build directory structure -->
	
	<!-- =================================================================== -->
	<target name = "prepare" depends = "init">    
		<mkdir dir = "${classes}"/>    
		<mkdir dir = "${dist}"/>
		<mkdir dir = "${javadocs}"/>    
                <mkdir dir = "${logs}"/>
                <mkdir dir = "${plugins}"/>
	</target>  
	<!-- =================================================================== -->
	
	<!-- JAVACC -->

        <target name = "clean-clips">
		<!-- Delete these files because Ant's javacc task won't regenerate files when the date on the files is the same as the date on the grammer file (Parser.jj) -->
		<delete file = "${src}/edu/stanford/smi/protege/storage/clips/ParseException.java"/>
		<delete file = "${src}/edu/stanford/smi/protege/storage/clips/Parser.java"/>
		<delete file = "${src}/edu/stanford/smi/protege/storage/clips/ParserConstants.java"/>
		<delete file = "${src}/edu/stanford/smi/protege/storage/clips/ParserTokenManager.java"/>
		<delete file = "${src}/edu/stanford/smi/protege/storage/clips/SimpleCharStream.java"/>
		<delete file = "${src}/edu/stanford/smi/protege/storage/clips/Token.java"/>
		<delete file = "${src}/edu/stanford/smi/protege/storage/clips/TokenMgrError.java"/>
	</target>
	<!-- =================================================================== -->
	<target name = "javacc" depends = "prepare, clean-clips">
		<!-- Run JavaCC on Parser.jj to regenerate files that were deleted in above step. -->
		<javacc javacchome = "${javacc.home}/bin/lib" target = "${scripts}/Parser.jj" outputdirectory = "${src}/edu/stanford/smi/protege/storage/clips"/>  
	</target>  
	<!-- =================================================================== -->
	
	<!-- COMPILE -->
	
	<!-- =================================================================== -->
	<target name = "compile" depends = "prepare, javacc">    
		<javac srcdir = "${src}" destdir = "${classes}" deprecation = "{deprecation}" debug = "${debug}" optimize = "${optimize}" includeAntRuntime = "${includeAntRuntime}" source = "${source}">      
			<classpath refid = "project.classpath"/>    
		</javac>    
		<rmic base = "${classes}" stubversion = "1.2" classname = "edu.stanford.smi.protege.server.Server"/>    
		<rmic base = "${classes}" stubversion = "1.2" classname = "edu.stanford.smi.protege.server.ServerProject"/>    
		<rmic base = "${classes}" stubversion = "1.2" classname = "edu.stanford.smi.protege.server.framestore.ServerFrameStore"/>  
		<rmic base = "${classes}" stubversion = "1.2" classname = "edu.stanford.smi.protege.server.narrowframestore.ServerNarrowFrameStore"/>  
	</target>


	<target name = "compile-junit" depends = "compile">    
		<javac srcdir = "${junit}" 
                       destdir = "${classes}" 
                       deprecation = "{deprecation}" 
                       debug = "${debug}" 
                       optimize = "${optimize}" 
                       includeAntRuntime = "${includeAntRuntime}" 
                       source = "${source}">      
			<classpath refid = "project.classpath"/>    
		</javac>    
	</target>


	<!-- =================================================================== -->
	
	<!-- JAR -->
	
	<!-- =================================================================== -->
	<target name = "jar" depends = "compile">    
		<copy todir = "${classes}/edu/stanford/smi/protege/resource/files">      
			<fileset dir = "${src}/edu/stanford/smi/protege/resource/files"/>    
		</copy>    
		<copy todir = "${classes}/edu/stanford/smi/protege/resource/image">      
			<fileset dir = "${src}/edu/stanford/smi/protege/resource/image"/>    
		</copy>    
		<jar jarfile = "${dist}/protege.jar" basedir = "${classes}" manifest = "${src}/META-INF/MANIFEST.MF"/>  
	</target>


        <target name = "jar-junit" depends="compile, compile-junit, jar"/>

	<!-- =================================================================== -->
	
	<!-- JAVADOCS -->
	
	<!-- Create the API documentation -->
	
	<!-- =================================================================== -->
	<target name = "javadocs" depends = "prepare">    
		<javadoc packagenames = "${packages}" sourcepath = "${src}" destdir = "${javadocs}" doctitle = "${extended.name}" windowtitle = "${extended.name} API" author = "true" source = "${source}">      
			<bottom><![CDATA[
	<small>
	<a href=mailto:protege-help@smi.stanford.edu>Submit a bug report or feature request</a><br>
	${trademark}<br>
	${copyright}
      </small>]]></bottom>      
			<link href = "http://java.sun.com/j2se/1.4/docs/api/"/>      
			<link href = "http://www.junit.org/junit/javadoc/3.8/"/>      
			<classpath refid = "project.classpath"/>
		</javadoc>  
	</target>  
	<!-- =================================================================== -->
	
	<!-- DIST -->
	
	<!-- Zips up all source code, resources, and API documentation. -->
	
	<!-- =================================================================== -->
	<target name = "dist" depends = "jar, javadocs">
		<zip zipfile = "${dist}/protege-src-${build.version}.zip" update = "no">
			<zipfileset dir = "${src}" prefix = "${extended.name}/src"/>
			<zipfileset dir = "${javadocs}" prefix = "${extended.name}/docs/apidocs"/>
			<zipfileset dir = "${scripts}" includes = "Parser.jj" prefix = "${extended.name}/bin"/>
			<zipfileset dir = "${lib}" includes = "*.jar" prefix = "${extended.name}/lib"/>
                        <zipfileset dir = "." includes = "*.properties" prefix = "${extended.name}"/>
		</zip>
		<zip zipfile = "${dist}/protege-bin-${build.version}.zip" update = "no">
			<zipfileset dir = "${lib}" includes = "*.jar"/>
			<zipfileset dir = "${dist}" includes = "protege.jar"/>
		</zip>
	</target>
	<!-- =================================================================== -->
	
	<!-- ALL -->
	
	<!-- Generates jar, javadoc, and source distribution. -->
	
	<!-- =================================================================== -->
	<target name = "all" depends = "compile, javadocs, jar, dist"/>
	<!-- =================================================================== -->
	
	<!-- CLEAN -->
	
	<!-- =================================================================== -->
	<target name = "clean" description = "clean up" depends="clean-clips">    
		<delete dir = "${classes}"/>  
		<delete dir = "${dist}"/>
		<delete dir = "${javadocs}"/>
		<delete file = "${protege.jar}"/>
	</target>
	
	<!-- =================================================================== -->

        <target name = "junit" 
                description = "test the system"
                depends="compile-junit, jar">
          <junit  printsummary="withOutAndErr" haltonerror="on" fork="yes"
                  showoutput="yes">
            <classpath refid="project.classpath"/>
            <classpath refid="database.drivers"/>
            <classpath>
              <pathelement path="${dist}/protege.jar"/>
            </classpath>
            <jvmarg value="-Djava.util.logging.config.file=junit-logging.properties"/>
            <batchtest>
              <fileset dir="${junit}">
                <include name="**/*Test.java"/>
                <!-- Exclude the graphics tests -->
                <exclude name="**/*Package_Test.java"/>
                <!-- what's the story with this one? -->
                <exclude name="**/framestore/FrameStore_Test.java"/>
              </fileset>
            </batchtest>
          </junit>
        </target>
</project>
