/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package edu.stanford.smi.protege.storage.clips;

public class ParserTokenManager implements ParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x8000L) != 0L) {
                    jjmatchedKind = 78;
                    return 24;
                }
                if ((active0 & 0xffffffffffff0600L) != 0L || (active1 & 0xfffL) != 0L) {
                    jjmatchedKind = 78;
                    return 28;
                }
                if ((active0 & 0x2000L) != 0L)
                    return 1;
                return -1;
            case 1:
                if ((active0 & 0x4000000008000L) != 0L)
                    return 28;
                if ((active0 & 0xfffbffffffff0600L) != 0L || (active1 & 0xfffL) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 1;
                    return 28;
                }
                return -1;
            case 2:
                if ((active0 & 0x4000000L) != 0L)
                    return 28;
                if ((active0 & 0xfffbfffffbff0600L) != 0L || (active1 & 0xfffL) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 2;
                    return 28;
                }
                return -1;
            case 3:
                if ((active0 & 0x3c02100000000000L) != 0L || (active1 & 0x41L) != 0L)
                    return 28;
                if ((active0 & 0xc3f9effffbff0600L) != 0L || (active1 & 0xfbeL) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 78;
                        jjmatchedPos = 3;
                    }
                    return 28;
                }
                return -1;
            case 4:
                if ((active0 & 0x100202010000200L) != 0L || (active1 & 0x900L) != 0L)
                    return 28;
                if ((active0 & 0xdaf9cfdfebff0400L) != 0L || (active1 & 0x6beL) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 4;
                    return 28;
                }
                return -1;
            case 5:
                if ((active0 & 0x8080000000020000L) != 0L || (active1 & 0x2aL) != 0L)
                    return 28;
                if ((active0 & 0x5a79cfdfebfd0400L) != 0L || (active1 & 0x694L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 5;
                    return 28;
                }
                return -1;
            case 6:
                if ((active0 & 0x2004c440000000L) != 0L || (active1 & 0x404L) != 0L)
                    return 28;
                if ((active0 & 0x5a59cb1babfd0400L) != 0L || (active1 & 0x290L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 6;
                    return 28;
                }
                return -1;
            case 7:
                if ((active0 & 0x200020900010400L) != 0L)
                    return 28;
                if ((active0 & 0x5859c912abfc0000L) != 0L || (active1 & 0x290L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 7;
                    return 28;
                }
                return -1;
            case 8:
                if ((active0 & 0x800401080000000L) != 0L)
                    return 28;
                if ((active0 & 0x505989022bfc0000L) != 0L || (active1 & 0x290L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 8;
                    return 28;
                }
                return -1;
            case 9:
                if ((active0 & 0x1000800000000000L) != 0L || (active1 & 0x290L) != 0L)
                    return 28;
                if ((active0 & 0x405909022bfc0000L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 9;
                    return 28;
                }
                return -1;
            case 10:
                if ((active0 & 0x4040000020000000L) != 0L)
                    return 28;
                if ((active0 & 0x1909020bfc0000L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 10;
                    return 28;
                }
                return -1;
            case 11:
                if ((active0 & 0x1080000000000L) != 0L)
                    return 28;
                if ((active0 & 0x1801020bfc0000L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 11;
                    return 28;
                }
                return -1;
            case 12:
                if ((active0 & 0x801020bfc0000L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 12;
                    return 28;
                }
                if ((active0 & 0x10000000000000L) != 0L)
                    return 28;
                return -1;
            case 13:
                if ((active0 & 0x2080000L) != 0L)
                    return 28;
                if ((active0 & 0x8010209f40000L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 13;
                    return 28;
                }
                return -1;
            case 14:
                if ((active0 & 0x201d40000L) != 0L)
                    return 28;
                if ((active0 & 0x8010008200000L) != 0L) {
                    jjmatchedKind = 78;
                    jjmatchedPos = 14;
                    return 28;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 40:
                return jjStopAtPos(0, 11);
            case 41:
                return jjStopAtPos(0, 12);
            case 59:
                return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
            case 63:
                return jjMoveStringLiteralDfa1_0(0x600L, 0x0L);
            case 65:
                return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
            case 70:
                return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
            case 73:
                return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
            case 80:
                return jjMoveStringLiteralDfa1_0(0xa0000000000000L, 0x0L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x28L);
            case 86:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
            case 91:
                return jjStartNfaWithStates_0(0, 13, 1);
            case 93:
                return jjStopAtPos(0, 14);
            case 97:
                return jjMoveStringLiteralDfa1_0(0xbff0000L, 0x0L);
            case 98:
                return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x3e0000000L, 0x0L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x19c000000000L, 0x0L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
            case 109:
                return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x3800000000000L, 0x0L);
            case 111:
                return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x50000000000000L, 0x0L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x3f00000000000000L, 0x0L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x17L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x500L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 43:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(1, 15, 28);
                break;
            case 68:
                return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
            case 73:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
            case 76:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
            case 78:
                return jjMoveStringLiteralDfa2_0(active0, 0x60004000200L, active1, 0L);
            case 82:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
            case 85:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
            case 89:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x110000020000000L, active1, 0x100L);
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x1e00000c00000000L, active1, 0x400L);
            case 102:
                if ((active0 & 0x4000000000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 50, 28);
                break;
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x3fc0000L, active1, 0x1L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x9c000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x2003a001c0000000L, active1, 0x2L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x40000200000000L, active1, 0x800L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x100008000000L, active1, 0x80L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x400010000000L, active1, 0x10L);
            case 118:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa3_0(active0, 0x900000000000L, active1, 0L);
            case 66:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
            case 69:
                return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
            case 73:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
            case 77:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
            case 79:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000200L, active1, 0L);
            case 82:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
            case 83:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x200L);
            case 84:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
            case 89:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 26, 28);
                break;
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x9e00000000000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x205000020000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000200000000L, active1, 0x80L);
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L, active1, 0L);
            case 104:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x10010000000L, active1, 0x800L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000400003fc0000L, active1, 0x100L);
            case 109:
                return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x4101000100000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x5L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x400L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x8010000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x12000000000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
            case 118:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(1, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
            case 65:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
            case 66:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
            case 69:
                return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
            case 70:
                return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
            case 73:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x208L);
            case 76:
                return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
            case 78:
                return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
            case 86:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
            case 97:
                if ((active0 & 0x100000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 44, 28);
                return jjMoveStringLiteralDfa4_0(active0, 0x200600000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000900000000L, active1, 0L);
            case 100:
                if ((active0 & 0x400000000000000L) != 0L) {
                    jjmatchedKind = 58;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x1800000020000000L, active1, 0L);
            case 101:
                if ((active0 & 0x2000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 49, 28);
                else if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 61, 28);
                else if ((active1 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(3, 70, 28);
                return jjMoveStringLiteralDfa4_0(active0, 0x88000020000L, active1, 0L);
            case 103:
                return jjMoveStringLiteralDfa4_0(active0, 0x4100000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x5010000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0xbfc0000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa4_0(active0, 0x40000080000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x8008000000000000L, active1, 0x86L);
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x410L);
            case 116:
                if ((active1 & 0x1L) != 0L)
                    return jjStartNfaWithStates_0(3, 64, 28);
                return jjMoveStringLiteralDfa4_0(active0, 0x10410000010000L, active1, 0x800L);
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(2, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1);
            return 4;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000000L, active1, 0x80L);
            case 65:
                return jjMoveStringLiteralDfa5_0(active0, 0x20020000000400L, active1, 0L);
            case 66:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
            case 69:
                if ((active0 & 0x200L) != 0L)
                    return jjStartNfaWithStates_0(4, 9, 28);
                break;
            case 71:
                return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
            case 73:
                return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
            case 78:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
            case 79:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
            case 84:
                if ((active0 & 0x2000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 37, 28);
                break;
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x4L);
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x2L);
            case 100:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 28, 28);
                break;
            case 101:
                if ((active0 & 0x100000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 56, 28);
                else if ((active1 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(4, 72, 28);
                else if ((active1 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(4, 75, 28);
                return jjMoveStringLiteralDfa5_0(active0, 0x8010000040000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x410020000000L, active1, 0x400L);
            case 108:
                if ((active0 & 0x200000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 45, 28);
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000800000000L, active1, 0x10L);
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x9088100010000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000200000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa5_0(active0, 0x5400000000L, active1, 0L);
            case 119:
                return jjMoveStringLiteralDfa5_0(active0, 0x3fc0000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0, active1);
    }

    private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(3, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1);
            return 5;
        }
        switch (curChar) {
            case 67:
                if ((active0 & 0x80000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 55, 28);
                break;
            case 69:
                return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
            case 71:
                if ((active1 & 0x8L) != 0L)
                    return jjStartNfaWithStates_0(5, 67, 28);
                break;
            case 73:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
            case 76:
                if ((active1 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(5, 69, 28);
                break;
            case 78:
                return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
            case 85:
                return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x10800010000L, active1, 0L);
            case 100:
                if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 63, 28);
                return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
            case 101:
                if ((active1 & 0x2L) != 0L)
                    return jjStartNfaWithStates_0(5, 65, 28);
                return jjMoveStringLiteralDfa6_0(active0, 0x4001000303fc0000L, active1, 0L);
            case 102:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
            case 103:
                return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x4L);
            case 104:
                return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x208008008000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x60000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x410L);
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
            case 115:
                if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(5, 17, 28);
                return jjMoveStringLiteralDfa6_0(active0, 0x481080000000L, active1, 0L);
            case 119:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0, active1);
    }

    private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(4, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1);
            return 6;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa7_0(active0, 0x4000000200000000L, active1, 0L);
            case 67:
                return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
            case 69:
                if ((active0 & 0x20000000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 53, 28);
                break;
            case 76:
                return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0x200L);
            case 82:
                if ((active0 & 0x40000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 42, 28);
                break;
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0x41000028000000L, active1, 0x80L);
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa7_0(active0, 0x8000003fc0000L, active1, 0L);
            case 101:
                if ((active0 & 0x4000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 38, 28);
                else if ((active1 & 0x4L) != 0L)
                    return jjStartNfaWithStates_0(6, 66, 28);
                return jjMoveStringLiteralDfa7_0(active0, 0x880000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0x1080000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa7_0(active0, 0x410000000000L, active1, 0L);
            case 110:
                if ((active1 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(6, 74, 28);
                return jjMoveStringLiteralDfa7_0(active0, 0x810000000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
            case 116:
                if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 30, 28);
                else if ((active0 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 34, 28);
                else if ((active0 & 0x8000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 39, 28);
                return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x10L);
            case 118:
                return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0, active1);
    }

    private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(5, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1);
            return 7;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa8_0(active0, 0x10080003fc0000L, active1, 0x10L);
            case 69:
                if ((active0 & 0x20000000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 41, 28);
                break;
            case 73:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L);
            case 84:
                if ((active0 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(7, 10, 28);
                break;
            case 97:
                return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0x80L);
            case 101:
                if ((active0 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 32, 28);
                else if ((active0 & 0x200000000000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 57, 28);
                return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000010000000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa8_0(active0, 0x800000020000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
            case 115:
                if ((active0 & 0x800000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 35, 28);
                return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
            case 116:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(7, 16, 28);
                return jjMoveStringLiteralDfa8_0(active0, 0x40000088000000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0, active1);
    }

    private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(6, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1);
            return 8;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
            case 99:
                return jjMoveStringLiteralDfa9_0(active0, 0x200040000L, active1, 0L);
            case 101:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 31, 28);
                else if ((active0 & 0x1000000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 36, 28);
                return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0x80L);
            case 102:
                return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0L);
            case 103:
                return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0x40800020200000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
            case 112:
                return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa9_0(active0, 0x80001800000L, active1, 0L);
            case 116:
                if ((active0 & 0x400000000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 46, 28);
                return jjMoveStringLiteralDfa9_0(active0, 0x1001000000000000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L);
            case 121:
                if ((active0 & 0x800000000000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 59, 28);
                break;
            case 122:
                return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0, active1);
    }

    private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(7, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1);
            return 9;
        }
        switch (curChar) {
            case 89:
                if ((active1 & 0x200L) != 0L)
                    return jjStartNfaWithStates_0(9, 73, 28);
                break;
            case 97:
                return jjMoveStringLiteralDfa10_0(active0, 0x10000002400000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
            case 101:
                if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(9, 60, 28);
                return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L);
            case 102:
                if ((active1 & 0x10L) != 0L)
                    return jjStartNfaWithStates_0(9, 68, 28);
                break;
            case 105:
                return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa10_0(active0, 0x800000c0000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa10_0(active0, 0x4040000000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0L);
            case 116:
                if ((active0 & 0x800000000000L) != 0L)
                    return jjStartNfaWithStates_0(9, 47, 28);
                else if ((active1 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(9, 71, 28);
                return jjMoveStringLiteralDfa10_0(active0, 0x20800000L, active1, 0L);
            case 121:
                return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(8, active0, active1);
    }

    private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(8, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, 0L);
            return 10;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
            case 97:
                return jjMoveStringLiteralDfa11_0(active0, 0x140000L);
            case 101:
                return jjMoveStringLiteralDfa11_0(active0, 0x8000200000000L);
            case 108:
                return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
            case 109:
                return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
            case 110:
                if ((active0 & 0x40000000000000L) != 0L)
                    return jjStartNfaWithStates_0(10, 54, 28);
                break;
            case 111:
                return jjMoveStringLiteralDfa11_0(active0, 0x80000080000L);
            case 114:
                return jjMoveStringLiteralDfa11_0(active0, 0x10000c00000L);
            case 116:
                if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(10, 62, 28);
                return jjMoveStringLiteralDfa11_0(active0, 0x10000000200000L);
            case 118:
                return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
            case 121:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(10, 29, 28);
                break;
            default:
                break;
        }
        return jjStartNfa_0(9, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(9, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0, 0L);
            return 11;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
            case 97:
                return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
            case 98:
                return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
            case 99:
                return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L);
            case 101:
                if ((active0 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_0(11, 48, 28);
                return jjMoveStringLiteralDfa12_0(active0, 0x600000L);
            case 102:
                return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
            case 105:
                return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
            case 109:
                return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
            case 115:
                return jjMoveStringLiteralDfa12_0(active0, 0x8000200040000L);
            case 116:
                if ((active0 & 0x80000000000L) != 0L)
                    return jjStartNfaWithStates_0(11, 43, 28);
                break;
            case 117:
                return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
            default:
                break;
        }
        return jjStartNfa_0(10, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa12_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(10, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0, 0L);
            return 12;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
            case 101:
                return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
            case 103:
                return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
            case 104:
                if ((active0 & 0x10000000000000L) != 0L)
                    return jjStartNfaWithStates_0(12, 52, 28);
                break;
            case 109:
                return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
            case 110:
                return jjMoveStringLiteralDfa13_0(active0, 0xc00000L);
            case 111:
                return jjMoveStringLiteralDfa13_0(active0, 0x10001000000L);
            case 115:
                return jjMoveStringLiteralDfa13_0(active0, 0x8000200040000L);
            case 116:
                return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
            default:
                break;
        }
        return jjStartNfa_0(11, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa13_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(11, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(12, active0, 0L);
            return 13;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa14_0(active0, 0x8000000100000L);
            case 99:
                return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
            case 101:
                return jjMoveStringLiteralDfa14_0(active0, 0x240000L);
            case 103:
                return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
            case 108:
                return jjMoveStringLiteralDfa14_0(active0, 0x1000000L);
            case 110:
                return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L);
            case 111:
                return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
            case 115:
                if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(13, 19, 28);
                else if ((active0 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(13, 25, 28);
                break;
            case 116:
                return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(12, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa14_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(12, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(13, active0, 0L);
            return 14;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
            case 103:
                return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L);
            case 108:
                return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L);
            case 114:
                if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(14, 20, 28);
                else if ((active0 & 0x200000000L) != 0L)
                    return jjStartNfaWithStates_0(14, 33, 28);
                return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
            case 115:
                if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(14, 18, 28);
                else if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(14, 22, 28);
                else if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(14, 23, 28);
                else if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(14, 24, 28);
                break;
            default:
                break;
        }
        return jjStartNfa_0(13, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa15_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(13, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(14, active0, 0L);
            return 15;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x8000000000000L) != 0L)
                    return jjStartNfaWithStates_0(15, 51, 28);
                break;
            case 115:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(15, 21, 28);
                break;
            case 116:
                if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(15, 27, 28);
                break;
            case 121:
                if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(15, 40, 28);
                break;
            default:
                break;
        }
        return jjStartNfa_0(14, active0, 0L);
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL };
    static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

    private final int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 28;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 28:
                            if ((0xfffffcfeffffd9ffL & l) != 0L) {
                                if (kind > 78)
                                    kind = 78;
                                jjCheckNAddTwoStates(17, 20);
                            } else if (curChar == 40)
                                jjCheckNAddTwoStates(18, 19);
                            break;
                        case 0:
                            if ((0xfffffcfaffffd9ffL & l) != 0L) {
                                if (kind > 78)
                                    kind = 78;
                                jjCheckNAddTwoStates(17, 20);
                            } else if (curChar == 34)
                                jjCheckNAddStates(0, 2);
                            if (curChar == 59)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 24:
                            if ((0xfffff7ffffffffffL & l) != 0L)
                                jjCheckNAddStates(6, 8);
                            if ((0xfffffcfeffffd9ffL & l) != 0L) {
                                if (kind > 78)
                                    kind = 78;
                                jjCheckNAddTwoStates(17, 20);
                            } else if ((0x2400L & l) != 0L) {
                                if (kind > 5)
                                    kind = 5;
                            } else if (curChar == 40)
                                jjCheckNAddTwoStates(18, 19);
                            if (curChar == 13)
                                jjCheckNAdd(23);
                            break;
                        case 1:
                            if ((0xfffffcfaffffd9ffL & l) != 0L)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 2:
                            if (curChar == 40)
                                jjCheckNAddTwoStates(3, 4);
                            break;
                        case 3:
                            if ((0xfffffcfeffffd9ffL & l) != 0L)
                                jjCheckNAddTwoStates(3, 4);
                            break;
                        case 4:
                            if (curChar == 41)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 5:
                            if ((0xfffffcfeffffd9ffL & l) != 0L)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 7:
                            if (curChar == 34)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 8:
                            if ((0xfffffffbffffdbffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 10:
                            if ((0x8400000000L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 11:
                            if (curChar == 34 && kind > 77)
                                kind = 77;
                            break;
                        case 12:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(12, 15);
                            break;
                        case 13:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 14:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 15:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(13);
                            break;
                        case 16:
                            if ((0xfffffcfaffffd9ffL & l) == 0L)
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            break;
                        case 17:
                            if (curChar == 40)
                                jjCheckNAddTwoStates(18, 19);
                            break;
                        case 18:
                            if ((0xfffffcfeffffd9ffL & l) != 0L)
                                jjCheckNAddTwoStates(18, 19);
                            break;
                        case 19:
                            if (curChar != 41)
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            break;
                        case 20:
                            if ((0xfffffcfeffffd9ffL & l) == 0L)
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            break;
                        case 21:
                            if (curChar == 59)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 22:
                            if ((0x2400L & l) != 0L && kind > 5)
                                kind = 5;
                            break;
                        case 23:
                            if (curChar == 10 && kind > 5)
                                kind = 5;
                            break;
                        case 25:
                            if ((0xfffff7ffffffffffL & l) != 0L)
                                jjCheckNAddStates(6, 8);
                            break;
                        case 26:
                            if ((0xffffffffffffdbffL & l) != 0L)
                                jjCheckNAddStates(6, 8);
                            break;
                        case 27:
                            if (curChar == 13)
                                jjCheckNAdd(23);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 28:
                        case 20:
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            break;
                        case 0:
                            if ((0xffffffffd7ffffffL & l) != 0L) {
                                if (kind > 78)
                                    kind = 78;
                                jjCheckNAddTwoStates(17, 20);
                            } else if (curChar == 91)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 24:
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            jjCheckNAddStates(6, 8);
                            break;
                        case 1:
                            if ((0xffffffffd7ffffffL & l) != 0L)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 3:
                            jjAddStates(16, 17);
                            break;
                        case 5:
                            jjCheckNAddStates(9, 11);
                            break;
                        case 6:
                            if (curChar == 93 && kind > 76)
                                kind = 76;
                            break;
                        case 8:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 9:
                            if (curChar == 92)
                                jjAddStates(18, 20);
                            break;
                        case 10:
                            if ((0x14404410000000L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 16:
                            if ((0xffffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            break;
                        case 18:
                            jjAddStates(21, 22);
                            break;
                        case 25:
                        case 26:
                            jjCheckNAddStates(6, 8);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 28:
                        case 20:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            break;
                        case 0:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(17, 20);
                            break;
                        case 24:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(6, 8);
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                if (kind > 78)
                                    kind = 78;
                                jjCheckNAddTwoStates(17, 20);
                            }
                            break;
                        case 1:
                        case 5:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(9, 11);
                            break;
                        case 3:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(16, 17);
                            break;
                        case 8:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(0, 2);
                            break;
                        case 18:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(21, 22);
                            break;
                        case 25:
                        case 26:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(6, 8);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 8, 9, 11, 22, 24, 25, 26, 22, 27, 2, 5, 6, 8, 9, 13, 11, 3, 4, 10, 12, 14, 18,
            19, };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null,
            "\77\116\117\116\105", "\77\104\105\106\101\125\114\124", "\50", "\51", "\133", "\135", "\73\53",
            "\141\142\163\164\162\141\143\164", "\141\143\143\145\163\163",
            "\141\154\154\157\167\145\144\55\143\154\141\163\163\145\163",
            "\141\154\154\157\167\145\144\55\146\154\157\141\164\163",
            "\141\154\154\157\167\145\144\55\147\162\141\155\155\141\162",
            "\141\154\154\157\167\145\144\55\151\156\164\145\147\145\162\163",
            "\141\154\154\157\167\145\144\55\160\141\162\145\156\164\163",
            "\141\154\154\157\167\145\144\55\163\164\162\151\156\147\163",
            "\141\154\154\157\167\145\144\55\163\171\155\142\157\154\163",
            "\141\154\154\157\167\145\144\55\166\141\154\165\145\163", "\101\116\131",
            "\141\163\163\157\143\151\141\164\145\144\55\146\141\143\145\164", "\142\165\151\154\144",
            "\143\141\162\144\151\156\141\154\151\164\171", "\143\157\155\155\145\156\164",
            "\143\157\155\160\157\163\151\164\145", "\143\157\156\143\162\145\164\145",
            "\143\162\145\141\164\145\55\141\143\143\145\163\163\157\162", "\144\145\146\141\165\154\164",
            "\144\145\146\143\154\141\163\163", "\145\170\143\154\165\163\151\166\145", "\106\114\117\101\124",
            "\151\156\143\154\165\144\145", "\151\156\150\145\162\151\164",
            "\151\156\151\164\151\141\154\151\172\145\162\55\157\156\154\171", "\111\116\123\124\101\116\103\105",
            "\111\116\124\105\107\105\122", "\151\156\166\145\162\163\145\55\163\154\157\164", "\151\163\55\141",
            "\154\157\143\141\154", "\155\165\154\164\151\163\154\157\164", "\156\157\55\151\156\150\145\162\151\164",
            "\156\157\156\55\162\145\141\143\164\151\166\145", "\156\157\164\145", "\157\146",
            "\157\166\145\162\162\151\144\145\55\155\145\163\163\141\147\145",
            "\160\141\164\164\145\162\156\55\155\141\164\143\150", "\120\122\111\126\101\124\105",
            "\160\162\157\160\141\147\141\164\151\157\156", "\120\125\102\114\111\103", "\162\141\156\147\145",
            "\162\145\141\143\164\151\166\145", "\162\145\141\144", "\162\145\141\144\55\157\156\154\171",
            "\162\145\141\144\55\167\162\151\164\145", "\162\157\154\145",
            "\163\151\156\147\154\145\55\163\154\157\164", "\163\150\141\162\145\144", "\163\154\157\164",
            "\163\157\165\162\143\145", "\163\164\157\162\141\147\145", "\123\124\122\111\116\107",
            "\163\165\142\163\154\157\164\55\157\146", "\123\131\115\102\117\114", "\164\171\160\145",
            "\165\163\145\162\55\146\141\143\145\164", "\166\141\154\165\145",
            "\126\111\123\111\102\111\114\111\124\131", "\166\145\162\163\151\157\156", "\167\162\151\164\145", null,
            null, null, null, null, };
    public static final String[] lexStateNames = { "DEFAULT", };
    static final long[] jjtoToken = { 0xfffffffffffffe01L, 0x7fffL, };
    static final long[] jjtoSkip = { 0x3eL, 0x0L, };
    static final long[] jjtoSpecial = { 0x20L, 0x0L, };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[28];
    private final int[] jjstateSet = new int[56];
    protected char curChar;

    public ParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public ParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 28; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    return matchedToken;
                }
                if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    if (specialToken == null)
                        specialToken = matchedToken;
                    else {
                        matchedToken.specialToken = specialToken;
                        specialToken = (specialToken.next = matchedToken);
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                    TokenMgrError.LEXICAL_ERROR);
        }
    }

}
