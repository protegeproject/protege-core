
Working on the writing updates logic
   processing events = done
   working on begin/commit/rollback transaction
   Client side must do the right thing with an update containing a null.


Make sure that the begin/end transaction and all changes by another
session are sent in a surge.  Use two different calls in the ServerFrameStore
  Read updates -
     destination = caller - that is where they go.
     can we remove these as we see them? FifoReader.removeLastRead() ?

  Write updates -  server side: 
     if (seen outside of transaction) {
        everybody sees
     } else {
        set transaction scope
        destination = caller
        added to committable 
        caller sees immediately - delete after seeing
        others see later - entered when the transaction is committed.
     }

                - client side:
     the transaction updates get added to the transaction fifo writer

     when I make a new cache object I wrap it in the transaction fifo
     writer 

   make sure that the right thing happens  with the begin transaction.



The guy making the changes gets the update right away?  They probably
must being done in his context?

The Registration.clearCommits() code looks wrong.


Think about how to garbage collect the junk in the
FifoReader/FifoWriter code.  
   Easy - don't use them for updates.
